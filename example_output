compiling sources: [src/main/java/fr/inria/Main.java, src/main/java/fr/inria/StatementProcessor.java, src/main/java/fr/inria/LocalVariableProcessor.java]
compiled in 540 ms
compiling templates: []
compiled in 2 ms
fr.inria.StatementProcessor
property file not found for processor 'fr.inria.StatementProcessor'
Statement: 1
new exo.scanner.LocalVariableScanner()
-----------------------------------
Statement: 2
{
}
-----------------------------------
Statement: 3
super()
-----------------------------------
Statement: 4
{
    return scanner;
}
-----------------------------------
Statement: 5
return scanner
-----------------------------------
Statement: 6
{
    element.accept(scanner);
}
parameter access: element
-----------------------------------
Statement: 7
element.accept(scanner)
parameter access: element
-----------------------------------
Statement: 8
{
}
-----------------------------------
Statement: 9
super()
-----------------------------------
Statement: 10
{
    fr.inria.Main main = new fr.inria.Main();
    main.runSpoon(args[0]);
}
variable: main declared in file src/main/java/fr/inria/Main.java:20
variable access : main
parameter access: args
-----------------------------------
Statement: 11
fr.inria.Main main = new fr.inria.Main()
variable: main declared in file src/main/java/fr/inria/Main.java:20
-----------------------------------
Statement: 12
new fr.inria.Main()
-----------------------------------
Statement: 13
main.runSpoon(args[0])
variable access : main
parameter access: args
-----------------------------------
Statement: 14
{
    spoon.support.StandardEnvironment env = new spoon.support.StandardEnvironment();
    env.setComplianceLevel(6);
    env.setVerbose(true);
    env.setDebug(true);
    spoon.support.DefaultCoreFactory f = new spoon.support.DefaultCoreFactory();
    spoon.reflect.Factory factory = new spoon.reflect.Factory(f , env);
    spoon.support.builder.SpoonBuildingManager builder = new spoon.support.builder.SpoonBuildingManager(factory);
    for (java.lang.String dir : sourceDirectory.split(java.lang.System.getProperty("path.separator")))
        try {
            builder.addInputSource(new java.io.File(dir));
            builder.build();
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    spoon.processing.ProcessingManager pm = new spoon.support.QueueProcessingManager(factory);
    fr.inria.StatementProcessor processor = new fr.inria.StatementProcessor(new fr.inria.LocalVariableProcessor());
    pm.addProcessor(processor);
    pm.process();
}
variable: env declared in file src/main/java/fr/inria/Main.java:26
variable access : env
variable access : env
variable access : env
variable: f declared in file src/main/java/fr/inria/Main.java:31
variable: factory declared in file src/main/java/fr/inria/Main.java:32
variable access : f
variable access : env
variable: builder declared in file src/main/java/fr/inria/Main.java:33
variable access : factory
variable: dir declared in file src/main/java/fr/inria/Main.java:34
parameter access: sourceDirectory
variable access : builder
variable access : dir
variable access : builder
variable: e declared in file src/main/java/fr/inria/Main.java:38
variable access : e
variable: pm declared in file src/main/java/fr/inria/Main.java:41
variable access : factory
variable: processor declared in file src/main/java/fr/inria/Main.java:42
variable access : pm
variable access : processor
variable access : pm
-----------------------------------
Statement: 15
spoon.support.StandardEnvironment env = new spoon.support.StandardEnvironment()
variable: env declared in file src/main/java/fr/inria/Main.java:26
-----------------------------------
Statement: 16
new spoon.support.StandardEnvironment()
-----------------------------------
Statement: 17
env.setComplianceLevel(6)
variable access : env
-----------------------------------
Statement: 18
env.setVerbose(true)
variable access : env
-----------------------------------
Statement: 19
env.setDebug(true)
variable access : env
-----------------------------------
Statement: 20
spoon.support.DefaultCoreFactory f = new spoon.support.DefaultCoreFactory()
variable: f declared in file src/main/java/fr/inria/Main.java:31
-----------------------------------
Statement: 21
new spoon.support.DefaultCoreFactory()
-----------------------------------
Statement: 22
spoon.reflect.Factory factory = new spoon.reflect.Factory(f , env)
variable: factory declared in file src/main/java/fr/inria/Main.java:32
variable access : f
variable access : env
-----------------------------------
Statement: 23
new spoon.reflect.Factory(f , env)
variable access : f
variable access : env
-----------------------------------
Statement: 24
spoon.support.builder.SpoonBuildingManager builder = new spoon.support.builder.SpoonBuildingManager(factory)
variable: builder declared in file src/main/java/fr/inria/Main.java:33
variable access : factory
-----------------------------------
Statement: 25
new spoon.support.builder.SpoonBuildingManager(factory)
variable access : factory
-----------------------------------
Statement: 26
for (java.lang.String dir : sourceDirectory.split(java.lang.System.getProperty("path.separator")))
    try {
        builder.addInputSource(new java.io.File(dir));
        builder.build();
    } catch (java.lang.Exception e) {
        e.printStackTrace();
    }
variable: dir declared in file src/main/java/fr/inria/Main.java:34
parameter access: sourceDirectory
variable access : builder
variable access : dir
variable access : builder
variable: e declared in file src/main/java/fr/inria/Main.java:38
variable access : e
-----------------------------------
Statement: 27
java.lang.String dir
variable: dir declared in file src/main/java/fr/inria/Main.java:34
-----------------------------------
Statement: 28
sourceDirectory.split(java.lang.System.getProperty("path.separator"))
parameter access: sourceDirectory
-----------------------------------
Statement: 29
java.lang.System.getProperty("path.separator")
-----------------------------------
Statement: 30
try {
    builder.addInputSource(new java.io.File(dir));
    builder.build();
} catch (java.lang.Exception e) {
    e.printStackTrace();
}
variable access : builder
variable access : dir
variable access : builder
variable: e declared in file src/main/java/fr/inria/Main.java:38
variable access : e
-----------------------------------
Statement: 31
{
    builder.addInputSource(new java.io.File(dir));
    builder.build();
}
variable access : builder
variable access : dir
variable access : builder
-----------------------------------
Statement: 32
builder.addInputSource(new java.io.File(dir))
variable access : builder
variable access : dir
-----------------------------------
Statement: 33
new java.io.File(dir)
variable access : dir
-----------------------------------
Statement: 34
builder.build()
variable access : builder
-----------------------------------
Statement: 35
java.lang.Exception e
variable: e declared in file src/main/java/fr/inria/Main.java:38
-----------------------------------
Statement: 36
{
    e.printStackTrace();
}
variable access : e
-----------------------------------
Statement: 37
e.printStackTrace()
variable access : e
-----------------------------------
Statement: 38
spoon.processing.ProcessingManager pm = new spoon.support.QueueProcessingManager(factory)
variable: pm declared in file src/main/java/fr/inria/Main.java:41
variable access : factory
-----------------------------------
Statement: 39
new spoon.support.QueueProcessingManager(factory)
variable access : factory
-----------------------------------
Statement: 40
fr.inria.StatementProcessor processor = new fr.inria.StatementProcessor(new fr.inria.LocalVariableProcessor())
variable: processor declared in file src/main/java/fr/inria/Main.java:42
-----------------------------------
Statement: 41
new fr.inria.StatementProcessor(new fr.inria.LocalVariableProcessor())
-----------------------------------
Statement: 42
new fr.inria.LocalVariableProcessor()
-----------------------------------
Statement: 43
pm.addProcessor(processor)
variable access : pm
variable access : processor
-----------------------------------
Statement: 44
pm.process()
variable access : pm
-----------------------------------
Statement: 45
{
    fr.inria.StatementProcessor.this.decoratedAbstractProcessor = decoratedAbstractProcessor;
}
parameter access: decoratedAbstractProcessor
-----------------------------------
Statement: 46
super()
-----------------------------------
Statement: 47
fr.inria.StatementProcessor.this.decoratedAbstractProcessor = decoratedAbstractProcessor
parameter access: decoratedAbstractProcessor
-----------------------------------
Statement: 48
{
    (i)++;
    java.lang.System.out.println(("Statement: " + (i)));
    java.lang.System.out.println(element);
    fr.inria.StatementProcessor.this.decoratedAbstractProcessor.process(element);
    java.lang.System.out.println("-----------------------------------");
}
parameter access: element
parameter access: element
-----------------------------------
Statement: 49
(i)++
-----------------------------------
Statement: 50
java.lang.System.out.println(("Statement: " + (i)))
-----------------------------------
Statement: 51
java.lang.System.out.println(element)
parameter access: element
-----------------------------------
Statement: 52
fr.inria.StatementProcessor.this.decoratedAbstractProcessor.process(element)
parameter access: element
-----------------------------------
Statement: 53
java.lang.System.out.println("-----------------------------------")
-----------------------------------
